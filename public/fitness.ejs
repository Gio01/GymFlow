<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>GymFlow</title>
    <link rel="stylesheet" href="./styles/index.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
<script type="text/javascript" src="https://platform.fatsecret.com/js/static/script/final.js"></script>
<script src="https://platform.fatsecret.com/js?key=6fde3dcb6dcf46c589985a16555a5f8e&fatsecret_session_key=<%=sk %>"></script>
        <script>
            function doLoad(){
                //fatsecret.setCanvas("profile.sign_in");

                fatsecret.setContainer("my_container");
                fatsecret.setCanvas("home");
                //fatsecret.setCanvasUrl("profile.sign_in","https://gymflow-47c9b.web.app/profile");
                //fatsecret.setCanvasUrl("profile.sign_in","http://localhost:5001/gymflow-47c9b/us-central1/api/profile" );
            }
        </script>
        <script id="fs_2494db58ae0d443c9b26d4400cdc9873_script" src="https://platform.fatsecret.com/js/Default.aspx?pg=home&amp;key=a8abdcd07de245fbb88c930cb2019b79&amp;uDate=1586182917312&amp;nonce=bf8PKpbSY5&amp;sep=fs_2494db58ae0d443c9b26d4400cdc9873&amp;v_an=31&amp;v_at=true"></script>
</head>

<body onload="doLoad()">
	<!--Hello-->
    <script src="https://kit.fontawesome.com/b99e675b6e.js">

    </script>
    <div class="wrapper" style="display: flex; flex-direction: column;">
        <div id="top_nav" class="top_navbar">
            <div class="hamburger">
                <div class="one"></div>
                <div class="two"></div>
                <div class="three"></div>
            </div>
            <div class="top_menu">
                <div class="logo">
                	<img src="./img/GymFlow.jpeg" alt="GymFlow"
			style="height: 50%; width:55%;">
		</div>
                <ul>
                    <li><a href="/login">
                            <i class="fas fa-user"></i>
                        </a></li>
                    <li style=" padding-bottom: 0;">
                        <a href="#" class="logged-in" id="logout" display="none">
                            <i class="fas fa-sign-out-alt"></i>
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <div class="sidebar">
            <ul>
                <li>
                    <a href="/">
                        <span class="icon"><i class="fas fa-home"></i></span>
                        <span class="title">Home</span>
                    </a></li>
                <li>
                    <a href="/fitness">
                        <span class="icon"><i class="fas fa-dumbbell"></i></span>
                        <span class="title">Fitness</span>
                    </a>
                </li>
                <li class="logged-in">
                    <a href="/profile">
                        <span class="icon"><i class="fas fa-id-card"></i></span>
                        <span class="title">Profile</span>
                    </a>
                </li>
                <li>
                    <a href="/program" display="none">
                        <span class="icon"><i class="fa fa-map-signs" aria-hidden="true"></i></span>
                        <span class="title">Program</span>
                    </a>
                </li>
                <li><a href="/contact">
                        <span class="icon"><i class="fas fa-address-book"></i></span>
                        <span class="title">Contact</span>
                    </a></li>
            </ul>
        </div>

        <div class="main_container">

	<div class="item" >
                <h2> Monthly Progress:</h2>
                <br>
                <center>
                    <canvas id="BarChart" width="100" height="50"> </canvas>
                    <br>
                    <canvas id="LineChart" width="100" height="50"> </canvas>
                </center>
                <br>

                <h2>Enter New Workout:</h2>
                <br>
                Choose Exercise:<br>
                <br>
                <select id="ExerciseName">
                    <option value="bench">Bench Press</option>
                    <option value="squat">Squat</option>
                    <option value="pull ups">Pull Ups</option>
                    <option value="push ups">Push Ups</option>
                </select>
                <br>
                <br>Number of Sets<br>
                <input type="text" id="NumSets" required>
                <br>
                <br>Number of Reps<br>
                <input type="text" id="NumReps" required>
                <br>
                <br> Weight used (lb):<br>
                <input type="text" id="WeightUsed" required>
                <br><br>
                <button id="workout_form" value="Submit">Submit </button>
    </div>


	<div class="item">
        <h2>Daily Macros:</h2>
        <center>
		  <canvas id="MacrosChart" width="100" height="50"> </canvas>
	   </center>
    </div>

       <div class='item' id='my_container'>

                Login to FatSecret to get your macros <a href="#" onclick="fatsecret_doLogin()">here</a>
        <script type="text/javascript">

        var fatsecret_doLogin  = function(){ window.location.href = 'https://www.fatsecret.com/Auth.aspx?pa=clsi&referrerUrl=https%3a%2f%2fplatform.fatsecret.com%2fapi%2fstatic%2fsample%2fauthentication%2flogin.html&key=a8abdcd07de245fbb88c930cb2019b79&signature=vjqih%2brbRDxvBkU%2bLfp90FE7e9Y%3d'; }  ;
        </script>
	</div>
            <script src="./scripts/navscripts.js"> </script>


            <script src="https://www.gstatic.com/firebasejs/7.10.0/firebase-app.js"></script>
            <script src="https://www.gstatic.com/firebasejs/7.10.0/firebase-auth.js"></script>
            <script src="https://www.gstatic.com/firebasejs/7.10.0/firebase-firestore.js"></script>

            <!-- TODO: Add SDKs for Firebase products that you want to use
 https://firebase.google.com/docs/web/setup#available-libraries -->
            <script src="https://www.gstatic.com/firebasejs/7.10.0/firebase-analytics.js"></script>
	    <script>
 // Your web app's Firebase configurationvar
var firebaseConfig = {
  apiKey: "AIzaSyCVqKw0SWmEoRtIiJaCM-hRJUxRA3Mbc1g",
    authDomain: "gymflow-47c9b.firebaseapp.com",
    databaseURL: "https://gymflow-47c9b.firebaseio.com",
    projectId: "gymflow-47c9b",
    storageBucket: "gymflow-47c9b.appspot.com",
    messagingSenderId: "728577478893",
    appId: "1:728577478893:web:d86266b8cfa6b13f99bce4",
    measurementId: "G-M97878F1TC"
};;
// Initialize Firebase
firebase.initializeApp(firebaseConfig);

// Make auth and firestore references!
const auth = firebase.auth();
const db = firebase.firestore();

//listen for auth
auth.onAuthStateChanged(user => {
            //if user is logged in then show data & if not then don't show anything
            if (user) {
                //console.log(user);

                setupUI(user) //we need to pass the user into the setupUI
                //to allow for the UI to appwar based on when the user is logged in or not

            } else {
                exercises([]);


           }

        });


        //logout method
        const logout = document.querySelector("#logout");
        logout.addEventListener('click', (e) => {
            e.preventDefault();
            auth.signOut().then(() => {
                console.log("User Logged Out!");
            });
        })


        const loggedOutLinks = document.querySelectorAll('.logged-out');
        const loggedInLinks = document.querySelectorAll('.logged-in');
        const workouts = document.querySelector('#workouts');
        const workoutForm = document.getElementById("workout_form");

        workoutForm.addEventListener('click', async function (){
            var exName = document.getElementById('ExerciseName').value;
            var sets = document.getElementById('NumSets').value;
            var reps = document.getElementById('NumReps').value;
            var weight = document.getElementById('WeightUsed').value;
            var user = firebase.auth().currentUser;
            console.log(user)
            var email;
            if(user){
                email = user.email;
                console.log(email)
            }else{
                console.log('No currently logged in user')
            }

            var data = {
                "Email": email,
                "ExerciseName": exName,
                "Sets": sets,
                "Reps": reps,
                "Weight": weight
            };
            console.log(data)

            var exercise = await fetch('http://localhost:5001/gymflow-47c9b/us-central1/api/fitness-form', {
                method: 'POST',
                headers: { 'Content-Type' :'application/json'},
                body: JSON.stringify(data)
            }).then(
		    console.log(exercise)
	    );

            console.log("Button Clicked");
	    location.reload();
	}

        );
        //const media = document.querySelector('.media-acc');



        const setupUI = user => {
            if (user) {

                let labelsArr = [];
                var weightArr = [];
                var timeArr = [];
                var a = [];
                var work = [];

                chartIt();
                lineGraph();
               //doughnutChart();

               /** 
                * getData() retrives the dates of all exercises in general for the global time frame
                * of a user working out
               */
                async function getData() {
                    await db.collection('users').doc(user.uid).collection('exercises').orderBy('createdAt')
                        .get().then(data => {
                            data.forEach(doc => {

                                var exercise = doc.data().exercise;
                                labelsArr.push(exercise);

                                var weight = doc.data().weight;
                                weightArr.push(weight);

                                var date = doc.data().createdAt;
                                var d = date.toDate();

                                //getMonth() begins at 0
                                a = (d.getMonth() + 1)+ '/' + d.getDate();

                                if (timeArr.length < 32 && (timeArr.includes(a) == false)) {
                                   
                                        timeArr.push(a);
                        
                                } else if (timeArr.length > 32){
                                    //This is so we limit the graphs to only a month (not perfect for each)
                                    //month but this is fine for now, I get a range of an average month of 31 days
                                            //removes the 1st element of the array
                                            timeArr.shift();
                                            //adds an element at the end of the array
                                            timeArr.push(a);
                                    } 

                            });

                        });
                }

                //NOTE: In order to get the documents in order by the createdAt I had to create an index in firebase so that it woill
                //get stored into firebase and ordered there in createdAt order. Go to databases in firebase and then go to index to see what the index is that I made to get this to work!
                //var benchw = [];
                var finalbench = [];
                async function getBenchData() {
                    await db.collection('users').doc(user.uid).collection('exercises').where('exercise', '==',
                        'bench').orderBy('createdAt').get().then(data => {
                        var time = [];
                        var b;
                        var benchtime = [];
                        var bt = new Map();
                        data.forEach(doc => {
                           // console.log(doc.data())
                            var date = doc.data().createdAt;

                            var d = date.toDate();

                            a = (d.getMonth() + 1) + '/' + d.getDate();
                            if(time.includes(a) == false){
                                time.push(a)
                            }
                            
                            //if(benchw.includes(doc.data().weight) == false){
                            //    benchw.push(doc.data().weight)
                            //}
                            var b = doc.data().weight;
                            for (var i = 0; i < time.length; i++){
                                bt.set(a, b);
                            }
                        })
//console.log(time)
                      
                        
  	                      //console.log(bt)
	
				for(var i = 0; i < time.length; i++){
					var x = time[i];
					//console.log(x)
					if(timeArr.includes(time[i]) == true){
						if(time[i] == timeArr[i]){
							benchtime[i] = x;
						}
						else if(time[i] != timeArr[i]){
							var t = time[i];
							//console.log("The current t val: " + t)
							for(var j = i; j < timeArr.length; j++){
								if(t == timeArr[j]){
									benchtime[j] = t;
									t = time[i+1];
									i++;
								}
								else {
									benchtime[j] = null;
									continue;
								}
							}
						
						}
						else {
							benchtime[i] = null;
						}
					}
			//console.log(benchtime);
				}


                        for(var i = 0; i < benchtime.length; i++){
                            if(benchtime[i] != null) {
                                finalbench[i] = bt.get(benchtime[i]);
                            } else {
                                finalbench[i] = null;
                            }
                        }
                        
                }
                    )
                    //console.log("Final bench!: " + finalbench)

                }
               

                //var squatw = [];
                var finalsquat = [];
                async function getSquatData() {
                    await db.collection('users').doc(user.uid).collection('exercises').where('exercise', '==',
                        'squat').orderBy('createdAt').get().then(data => {
                        var time = []; 
                        var squattime = [];
                        var a = [];
                        var bt = new Map();
                        data.forEach(doc => {

                            var date = doc.data().createdAt;
                            var d = date.toDate();

                            a = (d.getMonth() + 1) + '/' + d.getDate();

                            if(time.includes(a) == false){
                                time.push(a)
                            }
                            var b = doc.data().weight;
                            //if(squatw.includes(b) == false){
                               // squatw.push(b);
                            //}
                            
                            for (var i = 0; i < time.length; i++){
                                bt.set(a, b);
                            }
                        })
                    //console.log(time)          
                    //console.log(squatw)              
                       
                        
                        //console.log(bt)

	

				for(var i = 0; i < time.length; i++){
					var x = time[i];
					//console.log(x)
					if(timeArr.includes(time[i]) == true){
						if(time[i] == timeArr[i]){
							squattime[i] = x;
						}
						else if(time[i] != timeArr[i]){
							var t = time[i];
							//console.log("The current t val: " + t)
							for(var j = i; j < timeArr.length; j++){
								if(t == timeArr[j]){
									squattime[j] = t;
									t = time[i+1];
									i++;
								}
								else {
									squattime[j] = null;
									continue;
								}
							}
						
						}
						else {
							squattime[i] = null;
						}
					}
			//console.log(squattime);
				}


                        for(var i = 0; i < squattime.length; i++){
                            if(squattime[i] != null) {
                                finalsquat[i] = bt.get(squattime[i]);
                            } else {
                                finalsquat[i] = null;
                            }
                        }
//console.log("Final squat!: " + finalsquat)
                        
                        
                }
                    
                        )}

                var pullupw = [];
                var finalpullup = [];
                async function getPullUpData() {
                    await db.collection('users').doc(user.uid).collection('exercises').where('exercise', '==',
                        'pull ups').get().then(data => {
                        var time = [];
                        var pulluptime = [];
                        var a = [];
                        var bt = new Map();
                        data.forEach(doc => {

                            var date = doc.data().createdAt;
                            var d = date.toDate();

                            a = (d.getMonth() + 1) + '/' + d.getDate();

                            if(time.includes(a) == false){
                                time.push(a)
                            }
                            var b = doc.data().weight;
                            //if(pullupw.includes(b) == false){
                             //   pullupw.push(b);
                           // } 
                           for (var i = 0; i < time.length; i++){
                                bt.set(a, b);
                            }
                             
                        })

            //console.log(pullupw)
            //console.log(time)
                        
                        
                        //console.log(bt)
			for(var i = 0; i < time.length; i++){
				var x = time[i];
				//console.log(x)
				if(timeArr.includes(time[i]) == true){
					if(time[i] == timeArr[i]){
						pulluptime[i] = x;
					}
					else if(time[i] != timeArr[i]){
						var t = time[i];
						//console.log("The current t val: " + t)
						for(var j = i; j < timeArr.length; j++){
							if(t == timeArr[j]){
								pulluptime[j] = t;
								t = time[i+1];
								i++;
							}
							else {
								pulluptime[j] = null;
								continue;
							}
						}
					
					}
					else {
						pulluptime[i] = null;
					}
				}
			//console.log(pulluptime);
				}

                        for(var i = 0; i < pulluptime.length; i++){
                            if(pulluptime[i] != null) {
                                finalpullup[i] = bt.get(pulluptime[i]);
                            } else {
                                finalpullup[i] = null;
                            }
                        }
		//console.log("Final pull up!: " + finalpullup);

                    })
                }


                var ctx = document.getElementById('BarChart').getContext('2d');
                var macros = document.getElementById('MacrosChart').getContext('2d');
                var line = document.getElementById('LineChart')

                async function chartIt() {

                    await getData();
                    await getBenchData();
                    await getPullUpData();
                    await getSquatData();

                    new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: timeArr,
                            datasets: [{
                                    fill: false,
                                    label: ['Squat'],
                                    backgroundColor: 'rgb(0, 32, 255)',
                                    borderColor: 'rgb(0, 32, 255)',
                                    data: finalsquat
                                },
                                {
                                    fill: false,
                                    label: ['Bench'],
                                    backgroundColor: 'rgb(20, 32, 25)',
                                    borderColor: 'rgb(20, 32, 25)',
                                    data: finalbench
                                },
                                {
                                    fill: false,
                                    label: ['Pullups'],
                                    backgroundColor: 'rgb(20, 32, 125)',
                                    borderColor: 'rgb(20, 32, 125)',
                                    data: finalpullup
                                }
                            ]
                        },
                        options: {
                            scales: {
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: 500
                                    }
                                }]
                            }
                        }
                    });
                }
                //--------------------------------- Pie Chart Data


               // async function doughnutChart() {
                    //await getProteinData();
                    //await getCarbData();
                    //await getFatData();

                   new Chart(macros, {
                        type: 'pie',
                        data: {
                            datasets: [{
                                data: [200, 130, 80],
                                backgroundColor: ['#572991','#001399','#C40233'],
                            }],
                        labels: ['Carbs','Protein','Fats']
                        },
                        options: {
                            responsive: true,
                           
                        }
                    });

               // }


               async function lineGraph() {
                    await getData();
                    await getBenchData();
                    await getPullUpData();
                    await getSquatData();

                new Chart(line, {
                    type: 'line',
                    data:{
                        labels: timeArr,
                        datasets: [{
                            data: finalsquat,
                            label: ['Squat'],
			    backgroundColor: '#572991',
                            fill: false,
                            borderColor: '#572991',
                            
                        }, 
                        {
                            data: finalbench,
                            label:['Bench Press'],
			    backgroundColor: '#001399',
                            fill: false,
                            borderColor: '#001399',
                            
                        },
                        {
                            data: finalpullup,
                            label:['Pullup'],
			    backgroundColor: '#C40233',
				fill: true,
                            borderColor: '#C40233',
                           
                        }]
                    },
                options:{
			scales: {
			}
                }
               })
           }

                //toggle UI elements
                loggedInLinks.forEach(item => {
                    item.style.display = 'block'
                });
                loggedOutLinks.forEach(item => {
                    item.style.display = 'none'
                })
            } else {

                profileData.innerHTML = '';

                loggedInLinks.forEach(item => {
                    item.style.display = 'none'
                });
                loggedOutLinks.forEach(item => {
                    item.style.display = 'block'
                })
            }
        };

</script>
</body>

</html>
